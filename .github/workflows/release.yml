name: release

on:
  push:
    tags:
      - v*
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write
  packages: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release_step.outputs.upload_url }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get version from tag
        id: version
        run: |
          echo version=${GITHUB_REF#refs/tags/v} >> $GITHUB_OUTPUT
        shell: bash
      - name: Parse Changelog Entry
        id: changelog
        uses: coditory/changelog-parser@v1
        with:
          version: ${{ steps.version.outputs.version }}
      - name: Create GitHub Release
        id: create_release_step
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.changelog.outputs.version }}
          release_name: v${{ steps.changelog.outputs.version }}
          body: ${{ steps.changelog.outputs.description }}
  create_bundles_linux:
    runs-on: ubuntu-latest
    needs: create_release
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: install conan
        run: |
          sudo pip install conan==1.57.0
          conan profile new --detect default
      - name: build and pack OtterLib
        env:
          PROJECT_VERSION: ${{ needs.create_release.outputs.version }}
        run: |
          cd $GITHUB_WORKSPACE/OtterLib
          cmake -DBUILD_TESTING=OFF -S . -B build
          cmake --build build --target OtterLib --config Release
          cpack --config build/CPackConfig.cmake
      - name: build and pack rtype
        env:
          PROJECT_VERSION: ${{ needs.create_release.outputs.version }}
        run: |
          cd $GITHUB_WORKSPACE/games/rtype
          cmake -DBUILD_RELEASE=ON -S . -B build
          cmake --build build --target OtterLib r-type --config Release
          cpack --config build/CPackConfig.cmake
          ls
      - name: upload OtterLib artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: OtterLib/OtterLib-${{ needs.create_release.outputs.version }}-Linux.tar.gz
          asset_name: OtterLib-${{ needs.create_release.outputs.version }}-Linux.tar.gz
          asset_content_type: application/gzip
      - name: upload RType artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: games/rtype/RType-${{ needs.create_release.outputs.version }}-Linux-release.tar.gz
          asset_name: RType-${{ needs.create_release.outputs.version }}-Linux.tar.gz
          asset_content_type: application/gzip
  create_bundles_windows:
    runs-on: windows-latest
    needs: create_release
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: install conan
        run: |
          pip install conan==1.57.0
          conan profile new --detect default
      - name: build and pack OtterLib
        env:
          PROJECT_VERSION: ${{ needs.create_release.outputs.version }}
        run: |
          cd OtterLib
          ls
          cmake -DBUILD_TESTING=OFF -S . -B build -G "Visual Studio 17 2022"
          cmake --build build --target OtterLib --config Release
          cpack --config build/CPackConfig.cmake
          ls
          cd ../..
      - name: build and pack rtype
        env:
          PROJECT_VERSION: ${{ needs.create_release.outputs.version }}
        run: |
          cd games\rtype
          cmake -DBUILD_RELEASE=ON -S . -B build -G "Visual Studio 17 2022"
          cmake --build build --target OtterLib r-type --config Release
          cpack --config build/CPackConfig.cmake
          ls
          cd ../..
      - name: upload OtterLib artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: OtterLib/OtterLib-${{ needs.create_release.outputs.version }}-win64.zip
          asset_name: OtterLib-${{ needs.create_release.outputs.version }}-Windows-64bits.zip
          asset_content_type: application/zip
      - name: upload RType artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: games/rtype/RType-${{ needs.create_release.outputs.version }}-win64-release.zip
          asset_name: RType-${{ needs.create_release.outputs.version }}-Windows-64bits.zip
          asset_content_type: application/zip
      - name: upload RType installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: games/rtype/RType-${{ needs.create_release.outputs.version }}-win64.exe
          asset_name: RType-${{ needs.create_release.outputs.version }}-Windows64Installer.exe
          asset_content_type: application/vnd.microsoft.portable-executable
  deploy_docs:
    name: deploy docs on github pages
    if: github.repository == 'AmozPay/OtterLib'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup Pages
        uses: actions/configure-pages@v2
      - name: install doxygen
        run: |
          sudo apt install -y doxygen graphviz
      - name: build documentation
        run: |
          cd $GITHUB_WORKSPACE/docs
          ./generate_docs.prod.sh
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: 'docs/.retype'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1

  docker_publish:
    runs-on: ubuntu-latest
    if: github.repository == 'AmozPay/OtterLib'
    needs: create_release
    steps:
      - uses: actions/checkout@v2
      - name: build image
        env:
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          cd $GITHUB_WORKSPACE
          docker build \
            -t build_image \
            --label "org.opencontainers.image.source=${{ env.REPO_NAME }}" \
            --label "org.opencontainers.image.description=Server backend for OtterLib team's rtype project" \
            --label "org.opencontainers.image.licenses=MIT"\
            .
      - name: tag image to latest
        env:
          TAG: ${{ needs.create_release.outputs.version }}
        run: |
          docker image tag build_image ghcr.io/amozpay/rtype-server:latest
          docker image tag build_image ghcr.io/amozpay/rtype-server:${{ env.TAG }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: push images
        run: docker image push --all-tags ghcr.io/amozpay/rtype-server